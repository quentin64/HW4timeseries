#clear data
rm(list=ls())

#some packages we will use
install.packages("xlxs")
install.packages("readxl")
install.packages("sandwich")
install.packages("fBasics")
install.packages("quantmod")
install.packages("lmtest")
install.packages("nlme")
install.packages("urca")
install.packages("forecast")
install.packages("CADFtest")
install.packages("tseries")
install.packages("dynlm")
install.packages("vars")
install.packages("car")
install.packages("EIAdata")
install.packages("tidyquant")
install.packages("readtext")
install.packages("quanteda")
install.packages("xts")
install.packages("Ecdat")
install.packages("structchange")

require(lmtest)
require(nlme)
require(quantmod)
require(urca)
require(forecast)
require(fBasics)
require(CADFtest)
require(urca)
require(sandwich)
require(lmtest)
require(nlme)
require(tseries)
require(dynlm)
require(vars)
require(car)
require(EIAdata)
require(tidyquant)
require(readxl)
require(xlsx)
require(readtext)
require(quanteda)
require(xts)
require(Ecdat)
require(strucchange)
require(getsymbols)
load("~/Downloads/NGfinal.csv")

CSV<- read.csv("~/Downloads/NGfinal.csv")
View(CSV)


# Adjust time window for the Natural gas demand 
tsDemand <- ts(CSV$USDemand,frequency = 365, start = 2017)
plot(tsDemand)
tail(tsDemand)

# Adjust time window for the Total degree days
tsDD <- ts(CSV$Total_Gas_DD, frequency = 365, start = 2017)
plot(tsDD)
tail(tsDD)

# Adjust time window for the HDD
tsHDD <- ts(CSV$NG_HDD, frequency = 365, start = 2017)
plot(tsHDD)
tail(tsHDD)

# Adjust time window for the CDD
tsCDD <- ts(CSV$NG_CDD, frequency = 365, start = 2017)
plot(tsCDD)
tail(tsCDD)

# Take the series first difference
dtsDemand <- na.omit(diff(tsDemand))
dtsDD <- na.omit(diff(tsDD))
dtsHDD <- na.omit(diff(tsHDD))
dtsCDD <- na.omit(diff(tsCDD))

# Take the log for the second exercice
ltsDemand <- na.omit(log(tsDemand))
ltsDD <- na.omit(log(tsDD+min(tsDD)+1))
ltsHDD <- na.omit(log(tsHDD+min(tsDD)+1))
ltsCDD <- na.omit(log(tsCDD+min(tsDD)+1))

# Test the stationarity of the series level
adf.test(tsDemand)
adf.test(tsDD)
adf.test(tsHDD)
adf.test(tsCDD)

# Test  stationarity for the series first difference
adf.test(dtsDemand)
adf.test(dtsDD)
adf.test(dtsHDD)
adf.test(dtsCDD)

# Test  stationarity for the series first difference
adf.test(ltsDemand)
adf.test(ltsDD)
adf.test(ltsHDD)
adf.test(ltsCDD)

# Bind the series levels 
Bind <-cbind(tsDemand,tsDD,ts_gas,ts_dol)
View(Bind)
plot(Bind)

# Bind the differenciated series for use in Q1
Bdind <-cbind(dtsDemand,dtsDD,dtsHDD)
View(Bdind)
plot(Bdind)

# Bind the log series for use in Q2
Blind <-cbind(ltsDemand,ltsDD,ltsHDD,ltsCDD)
View(Blind)
plot(Blind)

# This is just for fun look at Linear model to see if there is correlation, removed my dollars index and price of natural gas because there was no correlation 
Linearmodel<-lm(tsDemand~tsDD)
print(Linearmodel)
summary(Linearmodel)

Linearmode<-lm(ltsDD~lts_gas)
print(Linearmode)
summary(Linearmode)

Linearmod<-lm(lts_dol~lts_gas)
print(Linearmod)
summary(Linearmod)


# PART 2 

# They "look" cointegrated DD and HDD look cointegrated but CDD doesnt look cointegrated 
MTSplot(Blind)


# residuals look stationary and might have a slight trend
ts.plot(ltsDemand)
ts.plot(ltsDD)
ts.plot(ltsHDD)
ts.plot(ltsCDD)


# Johanson test reject the null because test value superior to 5 pct
xa = ca.jo(Blind,ecdet="trend")
summary(xa)
# Reject the null of 1 or fewer cointegrating vectors, 
# because 154.06 > 25.54, the 5% critical value
# Reject null of 2 or fewer cointegrating vectors also.
# because 42.83 > 18.96, the 5% critical value
# Dont Reject null of 3 or fewer cointegrating vectors also.
# so probably 3 cointegrating vectors.


# without a trend, suggestions 3 cointegrating vectors
xo = ca.jo(Blind ,ecdet="const")
summary(xo)
# Reject the null of 1 or fewer cointegrating vectors, 
# because 98.56 > 22.56 at the 5% critical value
# Reject null of 2 or fewer cointegrating vectors also.
# because 42.49 > 15.67 at the 5% critical value
# Dont Reject null of 3 or fewer cointegrating vectors also.
# so probably 3 cointegrating vectors.


## Control for lags.
## First decide lag order If cointegrated, VAR in levels is okay

VARselect(Blind,lag.max=20,type="both")

VARorder(Blind ,maxp=20,output=T)

## Johansen test in diff, go with 3 lags because the first info AIC BIC sugest so therefore change K value below. 
## Evidence again of at leas 2, not quite 3 cointegrating vectors
ca.Blind = ca.jo(Blind ,type="trace",ecdet="trend",K=6,spec="transitory")
summary(ca.Blind)


## Here we choose two because we reject at more then two therefore there is at least 2 and more then 1 
## Report parameters (errocorrection= ect1 and ect2, they give return tinme parameters, 1 unit increase Gaso then ..ECT movement)
## Beta for ECT1 and ECT2 
ca.Blind2 = cajorls(ca.Blind,r=2)
ca.Blind2


## cointegrating vector
ca.Blind2$beta
## AR coefficients, and return time parameters are ect1 and ect2 in:
ca.Blind2$rlm

### For cointegrating vectors, we have 
### log.wti = 0.167*log.prop + 0.80*log.jet + 0.00014*t + ect1
### log.gas = -0.015*log.prop + 0.589*log.jet + 0.00054*t + ect2

### a positive shock to ect1 means wti is abnormally high relative to jet fuel and propane.
### a positive shock to ect2 means gasoline is abnormally high relative to jet fuel and propane

### A shock to ect1 (abnormally high wti crude price) implies wti crude will return 10.57% of the 
### way to equilibrium each period, but gasoline will increase 8.5%, propane 25% and jet fuel 16.5% each period.
### A 1% shock to ect2 (abnormally high gasoline) implies that wti crude will decrease by 0.04% next period.




## Question G: g.	Plot a forecast of the variables.
veclBlind = vec2var(ca.Blind,r=2)
plot(predict(veclBlind,n.ahead=50))



## Question :plot the non-orthogonalized vs. orthogonalized impulse response functions 

## impulse response functions using IRF's OIRF's
plot(irf(veclBlind,n.ahead=12,ortho=F))

plot(irf(veclBlind,n.ahead=12,ortho=T))


# Question 1 


# Estimating a VAR for oil & gas price returns
# use vars() package
D = cbind(dtsDD,dtsDemand)
# show series and summary statistics
plot(D,xlab="")
summary(D)

# select lag length
VARselect(D,lag.max=40,type="none")
# HQ and SC select 1 lag, FPE and AIC select 9 lags, same as below:
varD = VAR(D,lag.max=40,type="none",ic="FPE")
# type = trend, const, both, none
# lag.max= or p=
# can enter exogen= for exogenous variables
# can enter season=12 for seasonal frequency
# from VAR() output, can do use the following commands:
# coef, fevd, fitted, irf, Phi, logLik, plot, 
# predict, print, Psi, resid, summary, Acoef, Bcoef, BQ, causality,
# restrict, roots, 
# diagnostics: arch.test, normality.test, serial.test, stability
plot(varD)
# basic results of entire VAR:
summary(varD)
# summarize and plot individual equations:
summary(varD,equation="dtsDD")
plot(varD,name="dtsDD")

# Should go with smaller model if it gets rid of residual autocorrelation
varD1 = VAR(D,type="none",p=7)
plot(varD1)
Pacf(varD1)

# mostly, residual autocorrelation is nill except 9th lag in the gas equation.
# looking at the VAR(1) vs. VAR(9), the 8th and 9th lags in the gas equation have
# a lot of explanatory power. 9 months to move rigs and begin production?

# lets go with the VAR(9) for the sake of discussion.
roots(varD)
causality(varD, cause="dtsDemand")
causality(varD, cause="dtsDD")
causality(varD, cause="dtsDemand")
causality(varD, cause="dtsDD")
# appears that oil returns Granger-cause gas returns, but not vice versa.
# diagnostics:
normality.test(varD)
# rejects multivariate normality test for kurtosis!
# test for ARCH effects in the residuals:
arch.test(varD,lags.multi=28)
plot(arch.test(varD,lags.multi=28))
# significant ARCH effects in oil equation, could explain kurtosis/failure of normality.
serial.test(varD,lags.pt = 56)
# no residual serial correlation, which is good.
plot(serial.test(varD)) # same output as plot(arch.test())
# stability plots the cumulative sum of the errors of each equation
# because the errors are positive and negative, they should sum to zero.
# if the cumulative sum deviates, there is probably a structural break.
stability(varD)
plot(stability(varD))
# forecasting
varDp = predict(varD,n.ahead=50)
# 95% CI by default
plot(varDp)
# 90% CI by default, some better visualization tools: 
fanchart(varDp)
# impulse resonse functions. options ortho=T, cumulative=T or F
# can define impulse = "doil", response="dgas"
plot(irf(varD,n.ahead=12,ortho=FALSE))
plot(irf(varD,n.ahead=12,ortho=T))
Q=irf(varD,n.ahead=12,ortho=FALSE)
Q
R=irf(varD,n.ahead=12,ortho=T)
R
plot(irf(varog,n.ahead=24,ortho=T,impulse = "doil",response="dgas"))
plot(fevd(varog,n.ahead=24))



